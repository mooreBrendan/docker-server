version: '3'
services:
  #home assistant
  homeassistant:
    container_name: homeassistant
    image: "homeassistant/home-assistant:stable"
    # ports:
    #   - "8123:8123/tcp"
    volumes:
      - ./HomeAssistant:/config
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    privileged: true
    networks:
      - traefik_net
    #network_mode: host
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ha.rule=Host(`ha.bmoore.local`)"
      - "traefik.http.routers.ha.entrypoints=web,websecure"
      - "traefik.http.services.ha.loadbalancer.server.port=8123"
      - "traefik.http.routers.ha.tls=true"
      - "traefik.http.routers.ha.tls.certResolver=prod"
    extra_hosts:
      - host.docker.internal:172.17.0.1

  #pihole
  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    # For DHCP it is recommended to remove these ports and instead add: network_mode: host
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    #   - "67:67/udp"
    #   - "8070:80/tcp"
    #   - "8073:443/tcp"
    environment:
      TZ: 'America/Indianapolis'
      PROXY_LOCATION: pihole
      VIRTUAL_HOST: pihole.bmoore.local
      VIRTUAL_PORT: 80
      WEBPASSWORD: #'TEMP_PASSWORD' #'set a secure password here or it will be random'
      WEBPASSWORD_FILE: './pihole/etc-pihole/adminpw.txt'
    # Volumes store your data between container upgrades
    volumes:
      - './pihole/etc-pihole:/etc/pihole'
      - './pihole/etc-dnsmasq.d:/etc/dnsmasq.d'
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    cap_add:
      - NET_ADMIN # Recommended but not required (DHCP needs NET_ADMIN)      
    #network_mode: host
    restart: unless-stopped
    networks:
      - traefik_net
      # - lan
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=docker_external"
      - "traefik.http.routers.pihole.rule=Host(`pihole.bmoore.local`)"
      - "traefik.http.routers.pihole.entrypoints=web,websecure"
      - "traefik.http.routers.pihole.tls=true"
      - "traefik.http.routers.pihole.tls.certResolver=prod"
      - "traefik.http.routers.pihole.tls.domains[0].main=pihole.bmoore.local"
      - "traefik.http.routers.pihole.tls.domains[0].sans=pihole.bmoore.local"
      - "traefik.http.services.pihole.loadbalancer.server.port=80"
      - "traefik.frontend.rule=HostRegexp:pihole.bmoore.local,{catchall:.*}"
      - "traefik.frontend.priority=1"
      - "traefik.backend=pihole"

  #UPTIME KUMA
  uptime_kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    volumes:
      - uptime-kuma:/app/data
    # ports:
    #   - 8060:3001
    restart: always
    networks:
      - traefik_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.uptime.rule=Host(`uptime.bmoore.local`)"
      - "traefik.http.routers.uptime.entrypoints=web,websecure"
      - "traefik.http.services.uptime.loadbalancer.server.port=3001"
      - "traefik.http.routers.uptime.tls=true"
      - "traefik.http.routers.uptime.tls.certResolver=prod"

  #Watch Tower
  watch_tower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    restart: always
    networks:
      - traefik_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.wt.rule=Host(`wt.bmoore.local`)"
      - "traefik.http.routers.wt.entrypoints=web,websecure"
      - "traefik.http.routers.wt.tls=true"
      - "traefik.http.routers.wt.tls.certResolver=prod"

  #Portainer
  portainer:
    image: portainer/portainer-ce:latest
    hostname: portainer
    container_name: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - 8000:8000
      - 9443:9443
    # network_mode: service:traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.bmoore.local`)"
      - "traefik.http.routers.portainer.entrypoints=web,websecure"
      - "traefik.http.services.portainer.loadbalancer.server.port=9443"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.tls.certResolver=prod"

  dashy:
    # To build from source, replace 'image: lissy93/dashy' with 'build: .'
    # build: .    
    image: lissy93/dashy
    container_name: dashy
    # Pass in your config file below, by specifying the path on your host machine    
    volumes:
      - "./dashy/config.yml:/app/user-data/conf.yml"
      # ports:
      # - 443:443
      # - 80:8080
      # Set any environmental variables
    environment:
      - NODE_ENV=production
      # Specify your user ID and group ID. You can find this by running `id -u` and `id -g`    
      - UID=1000
      - GID=1000
    # Specify restart policy
    restart: unless-stopped
    networks:
      - traefik_net
    # Configure healthchecks
    healthcheck:
      test: [ 'CMD', 'node', '/app/services/healthcheck' ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      #start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashy.rule=Host(`dashy.bmoore.local`)"
      - "traefik.http.routers.dashy.entrypoints=web,websecure"
      - "traefik.http.services.dashy.loadbalancer.server.port=8080"
      - "traefik.http.routers.dashy.tls=true"
      - "traefik.http.routers.dashy.tls.certResolver=prod"

  ntfy:
    image: binwiederhier/ntfy
    container_name: ntfy
    command:
      - serve
    environment:
      NTFY_BASE_URL: http://ntfy.bmoore.local
      NTFY_BEHIND_PROXY: "true"
      NTFY_ATTACHMENT_CACHE_DIR: /var/lib/ntfy/attachments
    volumes:
      - /var/cache/ntfy:/var/cache/ntfy
      - ./ntfy:/var/lib/ntfy
    # ports:
    #   - 6060:80
    healthcheck:
      test: [ "CMD-SHELL", "wget -q --tries=1 http://127.0.0.1/v1/health -O - | grep -Eo '\"healthy\"\\s*:\\s*true' || exit 1" ]
      interval: 60s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - traefik_net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ntfy.rule=Host(`ntfy.bmoore.local`)"
      - "traefik.http.routers.ntfy.entrypoints=web,websecure"
      - "traefik.http.services.ntfy.loadbalancer.server.port=80"
      - "traefik.http.routers.ntfy.tls=true"
      - "traefik.http.routers.ntfy.tls.certResolver=prod"

  traefik:
    image: traefik
    container_name: traefik
    restart: unless-stopped
    ports:
      - '80:80'
      - '8081:8080'
      - '443:443'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/certs:/var/traefik/ssl-certs
      - ./traefik/log:/var/log/traefik
    networks:
      traefik_net:
        ipv4_address: 172.16.16.16
    command:
      - --log.level=INFO
      - --accesslog=true
      - --providers.docker=true
      - --providers.docker.network=traefik_net
      - --docker.exposedbydefault=false

  wazuh_manager:
    image: wazuh/wazuh-manager
    container_name: waz-man
    hostname: waz-man
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 655360
        hard: 655360
    # ports:
    #   - "1514:1514"
    #   - "1515:1515"
    #   - "514:514/udp"
    #   - "55000:55000"
    environment:
      - INDEXER_URL=https://wazuh.indexer:9200
      - INDEXER_USERNAME=${INDEXER_USERNAME:?error}
      - INDEXER_PASSWORD=${INDEXER_PASSWORD:?error}
      - FILEBEAT_SSL_VERIFICATION_MODE=full
      - SSL_CERTIFICATE_AUTHORITIES=/etc/ssl/root-ca.pem
      - SSL_CERTIFICATE=/etc/ssl/filebeat.pem
      - SSL_KEY=/etc/ssl/filebeat.key
      - API_USERNAME=${API_USERNAME:?error}
      - API_PASSWORD=${API_PASSWORD:?error}
    volumes:
      - wazuh_api_configuration:/var/ossec/api/configuration
      - wazuh_etc:/var/ossec/etc
      - wazuh_logs:/var/ossec/logs
      - wazuh_queue:/var/ossec/queue
      - wazuh_var_multigroups:/var/ossec/var/multigroups
      - wazuh_integrations:/var/ossec/integrations
      - wazuh_active_response:/var/ossec/active-response/bin
      - wazuh_agentless:/var/ossec/agentless
      - wazuh_wodles:/var/ossec/wodles
      - filebeat_etc:/etc/filebeat
      - filebeat_var:/var/lib/filebeat
      - ./config/wazuh_indexer_ssl_certs/root-ca-manager.pem:/etc/ssl/root-ca.pem
      - ./config/wazuh_indexer_ssl_certs/wazuh.manager.pem:/etc/ssl/filebeat.pem
      - ./config/wazuh_indexer_ssl_certs/wazuh.manager-key.pem:/etc/ssl/filebeat.key
      - ./config/wazuh_cluster/wazuh_manager.conf:/wazuh-config-mount/etc/ossec.conf
    networks:
      - traefik_net
    restart: unless-stopped

  wazuh.indexer:
    image: wazuh/wazuh-indexer:4.8.1
    container_name: wazuh-prod-1-indexer
    hostname: wazuh.indexer
    # ports:
    #   - "9200:9200"
    environment:
      - "OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - wazuh-indexer-data:/var/lib/wazuh-indexer
      - ./config/wazuh_indexer_ssl_certs/root-ca.pem:/usr/share/wazuh-indexer/certs/root-ca.pem
      - ./config/wazuh_indexer_ssl_certs/wazuh.indexer-key.pem:/usr/share/wazuh-indexer/certs/wazuh.indexer.key
      - ./config/wazuh_indexer_ssl_certs/wazuh.indexer.pem:/usr/share/wazuh-indexer/certs/wazuh.indexer.pem
      - ./config/wazuh_indexer_ssl_certs/admin.pem:/usr/share/wazuh-indexer/certs/admin.pem
      - ./config/wazuh_indexer_ssl_certs/admin-key.pem:/usr/share/wazuh-indexer/certs/admin-key.pem
      - ./config/wazuh_indexer/wazuh.indexer.yml:/usr/share/wazuh-indexer/opensearch.yml
      - ./config/wazuh_indexer/internal_users.yml:/usr/share/wazuh-indexer/opensearch-security/internal_users.yml
    networks:
      - traefik_net
    restart: unless-stopped

  wazuh.dashboard:
    image: wazuh/wazuh-dashboard:4.8.1
    container_name: wazuh-prod-1-dashboard
    hostname: wazuh.dashboard
    # (Optional) ->
    ports:
      - 4443:5601
    # <-
    environment:
      - INDEXER_USERNAME=${INDEXER_USERNAME:?error}
      - INDEXER_PASSWORD=${INDEXER_PASSWORD:?error}
      - WAZUH_API_URL=https://wazuh.manager
      - DASHBOARD_USERNAME=${DASHBOARD_USERNAME:?error}
      - DASHBOARD_PASSWORD=${DASHBOARD_PASSWORD:?error}
      - API_USERNAME=${API_USERNAME:?error}
      - API_PASSWORD=${API_PASSWORD:?error}
    volumes:
      - ./config/wazuh_indexer_ssl_certs/wazuh.dashboard.pem:/usr/share/wazuh-dashboard/certs/wazuh-dashboard.pem
      - ./config/wazuh_indexer_ssl_certs/wazuh.dashboard-key.pem:/usr/share/wazuh-dashboard/certs/wazuh-dashboard-key.pem
      - ./config/wazuh_indexer_ssl_certs/root-ca.pem:/usr/share/wazuh-dashboard/certs/root-ca.pem
      - ./config/wazuh_dashboard/opensearch_dashboards.yml:/usr/share/wazuh-dashboard/config/opensearch_dashboards.yml
      - ./config/wazuh_dashboard/wazuh.yml:/usr/share/wazuh-dashboard/data/wazuh/config/wazuh.yml
      - wazuh-dashboard-config:/usr/share/wazuh-dashboard/data/wazuh/config
      - wazuh-dashboard-custom:/usr/share/wazuh-dashboard/plugins/wazuh/public/assets/custom
    labels:
      - traefik.enable=true
      - traefik.http.routers.wazuh-prod-1-https.entrypoints=websecure
      - traefik.http.routers.wazuh-prod-1-https.rule=Host(`wazuh-prod-1.srv-prod-1.home.clcreative.de`)
      - traefik.http.routers.wazuh-prod-1-https.tls=true
      - traefik.http.routers.wazuh-prod-1-https.tls.certresolver=cloudflare
      - traefik.http.services.wazuh-prod-1-service.loadbalancer.server.port=5601
      - traefik.http.services.wazuh-prod-1-service.loadbalancer.server.scheme=https
    networks:
      - traefik_net
    depends_on:
      - wazuh.indexer
    restart: unless-stopped

volumes:
  uptime-kuma:
  portainer_data:
    wazuh_api_configuration:
  wazuh_etc:
  wazuh_logs:
  wazuh_queue:
  wazuh_var_multigroups:
  wazuh_integrations:
  wazuh_active_response:
  wazuh_agentless:
  wazuh_wodles:
  filebeat_etc:
  filebeat_var:
  wazuh-indexer-data:
  wazuh-dashboard-config:
  wazuh-dashboard-custom:


networks:
  traefik_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.16.0/24
          gateway: 172.16.16.1
  lan:
